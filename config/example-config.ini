[Telegram]
# Get from my.telegram.org
api_id = YOUR_API_ID # Required
api_hash = YOUR_API_HASH # Required
# Get from BotFather on Telegram
bot_token = YOUR_BOT_TOKEN # Required for sending messages
# Channel ID or username (e.g., -1001234567890 or 'mychannelusername')
channel_id = YOUR_CHANNEL_ID_OR_USERNAME # Required (channel to monitor)
# Optional: Channel ID or username for debug messages (leave blank to disable)
debug_channel_id = YOUR_DEBUG_CHANNEL_ID_OR_USERNAME

[MT5]
account = YOUR_MT5_ACCOUNT # Required
password = YOUR_MT5_PASSWORD # Required
server = YOUR_MT5_SERVER # Required
# Path to MT5 terminal executable (adjust for your system)
# Example Windows: C:\Program Files\MetaTrader 5\terminal64.exe
# Example Linux (Wine): /home/user/.wine/drive_c/Program Files/MetaTrader 5/terminal64.exe
path = C:\Program Files\MetaTrader 5\terminal64.exe # Required
symbol = XAUUSD # Default symbol to trade

[Gemini]
# Get from Google AI Studio (https://aistudio.google.com/app/apikey)
api_key = YOUR_GEMINI_API_KEY # Required
# Model name (e.g., gemini-pro, gemini-1.5-pro-latest, gemini-pro-vision)
model_name = gemini-pro

[Trading]
# Lot size calculation method: 'fixed' (more methods like 'risk_percent_equity' might be added later)
lot_size_method = fixed
# Lot size to use if method is 'fixed'
fixed_lot_size = 0.01
# Default lot size used as fallback if calculation fails or method is unsupported
default_lot_size = 0.01
# Maximum total open lots allowed for the configured symbol (0.0 to disable check)
max_total_open_lots = 0.1
# Maximum slippage allowed for market orders (in points)
max_slippage = 10
# Enable cooldown after a market order execution to prevent rapid successive trades
enable_market_order_cooldown = true
# Cooldown duration in seconds after a market order is executed
market_order_cooldown_seconds = 60
# The lot size for which the USD-based targets (AutoBE profit, TSL activation/trail) are defined.
# These targets will be scaled based on the actual trade volume relative to this base size.
base_lot_size_for_usd_targets = 0.01

[DecisionLogic]
# Weight for LLM sentiment score in pending order decisions (0.0 to 1.0)
sentiment_weight = 0.5
# Weight for price action check in pending order decisions (0.0 to 1.0)
price_action_weight = 0.5
# Minimum combined score required to approve a pending order (0.0 to 1.0)
approval_threshold = 0.6
# Whether to use the LLM sentiment score in the decision logic for pending orders
use_sentiment_analysis = true

[Logging]
# Path to the log file (relative to project root or absolute)
log_file = logs/bot.log
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
log_level = INFO

[Retries]
# Number of times to retry sending an order if a requote or off_quotes error occurs
requote_retry_attempts = 5
# Delay in seconds between requote/off_quotes retries
requote_retry_delay_seconds = 4

[Misc]
# Maximum number of recent message IDs to store for duplicate checking
duplicate_cache_size = 10000
# Interval in seconds for periodic checks (AutoSL, AutoBE, TP monitoring, etc.)
periodic_check_interval_seconds = 60

[LLMContext]
# Include current market price in the context sent to the LLM
enable_price_context = true
# Include list of active bot trades in the context sent to the LLM
enable_trade_context = true
# Include recent message history in the context sent to the LLM
enable_history_context = true
# Number of recent messages to include in the history context
history_message_count = 5

[Strategy]
# How to determine entry price when signal gives a range (e.g., "3106-3108")
# Options: midpoint, closest (to current market), farthest (from current market)
entry_range_strategy = midpoint
# How to handle Take Profit levels specified in the signal
# Options:
#   first_tp_full_close: Set initial order TP to the first valid TP, close full volume when hit.
#   last_tp_full_close: Set initial order TP to the last valid TP, close full volume when hit.
#   sequential_partial_close: Set initial order TP to first valid TP. When hit, close partial volume (see below) and modify remaining position TP to the next level. Repeat until last TP or manual close.
tp_execution_strategy = first_tp_full_close
# Percentage of ORIGINAL trade volume to close at each TP level when using 'sequential_partial_close' strategy (integer 1-99)
partial_close_percentage = 50

[AutoSL]
# Enable automatic Stop Loss placement if signal doesn't provide one
enable_auto_sl = false
# Delay in seconds after trade execution before applying AutoSL
auto_sl_delay_seconds = 60
# Fixed Stop Loss distance in price units (e.g., 5.0 means SL is placed $5 away from entry for XAUUSD)
auto_sl_price_distance = 5.0

[AutoBE]
# Enable automatic move of Stop Loss to Break Even
enable_auto_be = false
# Profit in account currency (e.g., USD) required to trigger AutoBE (relative to base_lot_size_for_usd_targets)
auto_be_profit_usd = 3.0

[AutoTP]
# Enable automatic Take Profit placement if signal doesn't provide one
enable_auto_tp = false
# Fixed Take Profit distance in price units (e.g., 10.0 means TP is placed $10 away from entry for XAUUSD)
auto_tp_price_distance = 10.0

[TrailingStop]
# Enable Trailing Stop Loss feature
enable_trailing_stop = false
# Minimum profit in account currency (e.g., USD) the trade must reach before TSL activates (relative to base_lot_size_for_usd_targets)
activation_profit_usd = 10.0
# Distance behind the current price (in price units) to set the trailing SL.
# Example: If trail_distance_price is 5.0, SL will always be placed $5 (price units) behind the current best price once activated.
trail_distance_price = 5.0

[LLMPrompts]
# --- Base instructions prepended to all analysis prompts ---
base_instructions =
    You are an expert trading assistant analyzing messages from a Telegram channel about XAUUSD (Gold) trading. The channel is run by a trading coach.
    Your goal is to identify actionable trading signals or updates related to existing trades, using the provided context. Ignore general chat, promotions, performance reports, and educational content unless it directly informs a specific, current trade signal or update.
    Know that the coach may send messages regarding his trade signals, to boast about success, or share winnings and running pips, and they will contain words like (gold, buy, sell, pips) and so on, but still, they may not be trading signals.
    Also, the coach may ask if you are ready to (buy or sell) with them, this is merely a support message, not a trading signal.
    You need to be quite sure that the intention of the message is a command to execute a trade, or to modify a previously sent trade signal.
    here is the additional context, so you understand the conversation better (older messages, in square brackets):

    [{context_str}]

    --- Main Message to Analyze ---

    Timestamp: Now (relative to context timestamps if provided)
    Message Text (between square brackets):

    [{message_text}]

    ---

# --- Instructions for classifying message and extracting details ---
analyze_signal_instructions =
    Analyze the **Main Message to Analyze** above, using the **Additional Context**, and determine the following:

    1.  **Message Type:** Classify the main message's primary purpose. Answer one of: `"new_signal"`, `"update"`, `"ignore"`.
        *   `"new_signal"`: Contains a direct, specific new trading signal (buy/sell XAUUSD).
        *   `"update"`: Provides an update (new SL/TP, move SL, set BE, close, partial close, cancel pending) that clearly relates to one of the numbered 'Active Bot Trades' listed in the context, or a very recent signal from history. Use the context to determine if it's an update.
        *   `"ignore"`: All other messages (general chat, analysis without a signal, questions, performance reports, status updates like 'TP hit' unless they clearly imply a close action for an active trade, etc.).

    2.  **Symbol:** Identify the trading symbol (e.g., "XAUUSD", "GOLD"). If none mentioned, assume "XAUUSD" if context implies it, otherwise `null`.

    3.  **Signal Details (ONLY if Message Type is "new_signal"):**
        *   `action`: "BUY" or "SELL".
        *   `entry_type`: "Pending" if a specific numeric price or price zone (e.g., "3106-3108") is mentioned for entry. Otherwise, "Market".
        *   `entry_price`: The specific numeric price, the "LOW-HIGH" string, or "Market" if no specific entry price is mentioned (implying immediate execution).
        *   `stop_loss`: Number or "N/A".
        *   `take_profits`: JSON list of numbers (e.g., `[3112, 3125]`) or `["N/A"]`. Extract all mentioned TP levels.
        *   `sentiment_score`: Number (-1.0 to +1.0).

    4.  **Update Details (ONLY if Message Type is "update"):**
        *   `target_trade_index`: The number (from the 'Active Bot Trades' list in the context) of the trade this update applies to. If the update doesn't clearly match a numbered trade, provide `null`.
        *   `update_type`: Classify the type of update based on the main message text and context. Answer one of: `"modify_sltp"`, `"move_sl"`, `"set_be"`, `"close_trade"`, `"partial_close"`, `"cancel_pending"`, `"unknown"`.
            - `"modify_sltp"`: Explicitly sets new SL and/or TP values. Extract *all* new TP levels mentioned.
            - `"move_sl"`: Explicitly moves SL to a *new specific value*.
            - `"set_be"`: Moves SL to Break Even (entry price). Check 'Active Bot Trades' context for entry price if needed.
            - `"close_trade"`: Instructs to close the entire trade/position now. Check 'Active Bot Trades' context.
            - `"partial_close"`: Instructs to close a portion of the trade. Extract volume or percentage. Check 'Active Bot Trades' context.
            - `"cancel_pending"`: Instructs to cancel a pending order. Check 'Active Bot Trades' context (pending orders might not be listed, but check history).
            - `"unknown"`: An update is mentioned but the type is unclear, or it doesn't clearly relate to an active trade.
        *   `new_stop_loss`: If `update_type` is `"move_sl"` or `"modify_sltp"`, provide the new SL number. Otherwise "N/A".
        *   `new_take_profits`: If `update_type` is `"modify_sltp"`, provide a JSON list of the new TP numbers (e.g., `[3115, 3120]`). Otherwise `["N/A"]`.
        *   `close_volume`: If `update_type` is `"partial_close"` and a specific lot size is mentioned (e.g., "close 0.02"), provide the number. Otherwise "N/A".
        *   `close_percentage`: If `update_type` is `"partial_close"` and a percentage is mentioned (e.g., "close 50%%"), provide the number (e.g., 50). Otherwise "N/A".

    Provide the output ONLY in valid JSON format.

    **JSON Structure:**

    *   **Required fields for ALL types:** `message_type` (string), `symbol` (string or null).
    *   **Additional fields ONLY if `message_type` is `"new_signal"`:** `is_signal` (must be `true`), `action`, `entry_type`, `entry_price`, `stop_loss`, `take_profits` (list of numbers or ["N/A"]), `sentiment_score`.
    *   **Additional fields ONLY if `message_type` is `"update"`:** `target_trade_index` (integer or null), `update_type` (string), `new_stop_loss` (number or "N/A"), `new_take_profits` (list of numbers or ["N/A"]), `close_volume` (number or "N/A"), `close_percentage` (number or "N/A").

    **Example Output (new_signal):**
    ```json
    {
      "message_type": "new_signal", "symbol": "XAUUSD", "is_signal": true, "action": "BUY", "entry_type": "Pending",
      "entry_price": "3106-3108", "stop_loss": 3103, "take_profits": [3112, 3125], "sentiment_score": 0.8
    }
    ```
    **Example Output (update - move SL):**
    ```json
    {
      "message_type": "update", "symbol": "XAUUSD", "target_trade_index": 1, "update_type": "move_sl", "new_stop_loss": 3110.5, "new_take_profits": ["N/A"]
    }
    ```
    **Example Output (update - set BE):**
    ```json
    {
      "message_type": "update", "symbol": "XAUUSD", "target_trade_index": 2, "update_type": "set_be", "new_stop_loss": "N/A", "new_take_profits": ["N/A"], "close_volume": "N/A", "close_percentage": "N/A"
    }
    ```
    **Example Output (update - partial close %%):**
    ```json
    {
      "message_type": "update", "symbol": "XAUUSD", "target_trade_index": 1, "update_type": "partial_close", "new_stop_loss": "N/A", "new_take_profits": ["N/A"], "close_volume": "N/A", "close_percentage": 50
    }
    ```
    **Example Output (update - partial close volume):**
    ```json
    {
      "message_type": "update", "symbol": "XAUUSD", "target_trade_index": 3, "update_type": "partial_close", "new_stop_loss": "N/A", "new_take_profits": ["N/A"], "close_volume": 0.01, "close_percentage": "N/A"
    }
    ```
    **Example Output (update - close):**
    ```json
    {
      "message_type": "update", "symbol": "XAUUSD", "target_trade_index": 1, "update_type": "close_trade", "new_stop_loss": "N/A", "new_take_profits": ["N/A"], "close_volume": "N/A", "close_percentage": "N/A"
    }
    ```
    **Example Output (ignore):**
    ```json
    {
      "message_type": "ignore", "symbol": null
    }
    ```

# --- Instructions specifically for analyzing edits/replies for missing SL/TP ---
analyze_edit_or_reply_instructions =
    This message is potentially an edit of, or a reply to, a previous message.
    Analyze the **Main Message to Analyze** above, using the **Additional Context** if provided.
    Does the main message provide a missing Stop Loss (SL) or Take Profit (TP) for a previously mentioned XAUUSD signal (check history/active trades)?

    1.  **Provides SL:** Does this message specify a Stop Loss price? Answer "true" or "false".
    2.  **SL Price:** If Provides SL is true, what is the Stop Loss price? Provide only the number. If false, answer "N/A".
    3.  **Provides TP:** Does this message specify a Take Profit price? Answer "true" or "false".
    4.  **TP Prices:** If Provides TP is true, what are the Take Profit price(s)? Provide a JSON list of numbers (e.g., `[3115, 3120]`). If false, answer `["N/A"]`.

    Provide the output ONLY in the following JSON format, with no other text before or after:
    {
      "provides_sl": boolean,
      "sl_price": number | "N/A",
      "provides_tp": boolean,
      "tp_prices": list[number] | list["N/A"]
    }

# --- Daily Summary Settings ---
[Summary]
# Hour and minute in UTC to send daily trade summary.
# Default is 21:15 UTC, shortly after US market close (4:15 PM New York time).
# Adjust as needed for your timezone or broker's server time.
summary_hour = 21
summary_minute = 15